"""
–§–∏—á–∏ –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
"""

import os
import random
from collections import deque

import logger

log = logger.get_logger(__name__)


def get_memes() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É –º–µ–º–∞—Å—É –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö, –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –º–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

    :return: –ø—É—Ç—å –∫ –ø–∏–∫—á–µ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if os.path.exists('./memes'):
        memes = list(filter(lambda x: x.endswith('.jpg'), os.listdir('./memes')))
    else:
        log.warning("Directory with memes (expected ./memes/) wasn't found")
        return ''

    if os.path.exists('./logs/log_memes.txt'):
        with open('./logs/log_memes.txt', 'r') as f:
            [last_meme] = deque(f, maxlen=1) or ['']
    else:
        last_meme = 0

    while True:
        output = random.choice(memes)
        if output != last_meme:
            with open('./logs/log_memes.txt', 'w+') as f:
                f.write(output)
            break

    return os.path.join('./memes', output)


def get_last_logs(file: str) -> str:
    """
    –í–µ—Ä–Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –¢–∞–∫–∂–µ –≤—Å–µ –∑–∞–ø–∏—à–µ—Ç –≤ –ª–æ–≥

    :param file: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    :return: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É
    """

    if not os.path.exists(f'./logs/{file}.log'):
        log.warning(f"File `./logs/{file}.log` wasn't found")
        return '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å—á–µ–∑ –ø—Ä—è–º–æ –Ω–∞ –≥–ª–∞–∑–∞—Ö üòê'

    with open(f'./logs/{file}.log', 'r') as f:
        return '\n'.join(f.readlines()[-15:])
