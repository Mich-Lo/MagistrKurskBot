from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import features
import logger
from dispatcher import dp, bot

log = logger.get_logger(__name__)


def init():
    pass


class Polling(StatesGroup):
    Start = State()
    Message = State()
    Title = State()
    TitleText = State()
    Target = State()
    Last = State()


@dp.message_handler(commands=['valentine'])
async def step_0(message: types.Message):
    btn_1 = types.InlineKeyboardButton('‚ù§', callback_data='start_btn')
    kb = types.InlineKeyboardMarkup().add(btn_1)
    await message.answer('''–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é "–¢–∞–π–Ω—ã–π –í–∞–ª–µ–Ω—Ç–∏–Ω"!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –ª—é–±–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –≤–µ–¥—å —Å–µ–≥–æ–¥–Ω—è ‚Äì –î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ ‚Äì –Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏ –≤ —Ç–∞–∫–∏–µ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–∞ üíñ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚ù§", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å''', reply_markup=kb)
    log.info(f'{message.from_user.id} start the valentine')


@dp.callback_query_handler(lambda c: c.data == 'start_btn')
async def step_1(callback_query: types.CallbackQuery):
    btn_1 = types.InlineKeyboardButton('üíå –ü–∏—Å—å–º–æ', callback_data='letter')
    btn_2 = types.InlineKeyboardButton('üíì –í–∞–ª–µ–Ω—Ç–∏–Ω–∫—É', callback_data='sticker')
    kb = types.InlineKeyboardMarkup().add(btn_1).add(btn_2)

    uid = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º!
–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?''', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'letter', state=None)
async def step_2_1(callback_query: types.CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    await state.update_data(type='letter')
    await state.update_data(uid=uid)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid,
                           '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª –±—ã —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ø–∏—Å—å–º–∞')
    await Polling.Start.set()


@dp.callback_query_handler(lambda c: c.data == 'sticker', state=None)
async def step_2_2(callback_query: types.CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    await state.update_data(type='sticker')
    await state.update_data(uid=uid)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–ó–¥–æ—Ä–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–æ–π. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ <a href="t.me/addstickers/love_you_tg_by_fStikBot">—Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞</a>, —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π.''', disable_web_page_preview=True)
    await Polling.Start.set()


@dp.message_handler(state=Polling.Start, content_types='sticker')
async def step_3_1(message: types.Message, state: FSMContext):
    answer = message.sticker.file_id
    await state.update_data(message=answer)

    btn_1 = types.InlineKeyboardButton('–î–∞!', callback_data='title_true')
    btn_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='title_false')
    kb = types.InlineKeyboardMarkup().add(btn_1).add(btn_2)

    await message.answer('–•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É?', reply_markup=kb)
    await Polling.Message.set()


@dp.message_handler(state=Polling.Start, content_types='text')
async def step_3_2(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(message=answer)

    btn_1 = types.InlineKeyboardButton('–î–∞!', callback_data='title_true')
    btn_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='title_false')
    kb = types.InlineKeyboardMarkup().add(btn_1).add(btn_2)

    await message.answer('–•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –ø–∏—Å—å–º–æ?', reply_markup=kb)
    await Polling.Message.set()


@dp.callback_query_handler(lambda c: c.data == 'title_true', state=Polling.Message)
async def step_4_1(callback_query: types.CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    await state.update_data(title=True)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–¢–æ–≥–¥–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!''')
    await Polling.Title.set()


@dp.callback_query_handler(lambda c: c.data == 'title_false', state=Polling.Message)
async def step_4_2(callback_query: types.CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    await state.update_data(title=False)

    mes_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton('–ò–¥–µ–º –¥–∞–ª—å—à–µ!')
    mes_kb.add(btn_1)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–û–∫–µ–π, –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º!''', reply_markup=mes_kb)
    await Polling.Title.set()


@dp.message_handler(state=Polling.Title)
async def step_5(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(title_text=answer)
    await message.answer('''<b>–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Ä–µ—à–∏–º, –∫–æ–º—É —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –ø–æ—Å–ª–∞–Ω–∏–µ.</b>

–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å —Ñ–∞–º–∏–ª–∏–µ–π), –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç.

<b>–í–∞–∂–Ω–æ:</b> –µ—Å–ª–∏ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, —Ç–æ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ id. –û —Ç–æ–º, –∫–∞–∫ —É–∑–Ω–∞—Ç—å id, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: @username_to_id_bot''', reply_markup=types.ReplyKeyboardRemove())
    await Polling.TitleText.set()


@dp.message_handler(state=Polling.TitleText)
async def step_6(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(target=answer)
    await message.answer('–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π...')

    if answer.isdigit():
        send_to = [int(answer)]
        await state.update_data(send_to=send_to)
        await message.answer(f'''<b>–í–æ—Ç –∫–æ–≥–æ –Ω–∞–º —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏.</b>

–í—ã–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É —Ç–µ–±–µ —á–µ–ª–æ–≤–µ–∫—É, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ —á–µ–ª–æ–≤–µ–∫–∞ –∑–¥–µ—Å—å –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å 0 –∏ –∫–æ–º–∞–Ω–¥—É /valentine, –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.

<b>1.</b> {send_to}''')
    else:
        tmp = []
        out = features.find_users(answer)
        await state.update_data(send_to=out)
        for i in range(len(out)):
            tmp.append(f'<b>{i+1}.</b> {"@"+out[i][1] if out[i][1] else ""} <i>({out[i][2].title() if out[i][2] else ""})</i>')
        await message.answer('''<b>–í–æ—Ç –∫–æ–≥–æ –Ω–∞–º —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏.</b>

–í—ã–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É —Ç–µ–±–µ —á–µ–ª–æ–≤–µ–∫—É, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ —á–µ–ª–æ–≤–µ–∫–∞ –∑–¥–µ—Å—å –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å 0 –∏ –∫–æ–º–∞–Ω–¥—É /valentine, –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.

''' + '\n'.join(tmp))
    await Polling.Target.set()


@dp.message_handler(state=Polling.Target)
async def step_7(message: types.Message, state: FSMContext):
    i = int(message.text) - 1
    if i == -1:
        await state.finish()
        log.info(f'{message.from_user.id} stop the poll after name search')
        return

    data = await state.get_data()
    print(data)
    out = data.get('send_to')
    if len(out) > 1:
        await state.update_data(slave_id=out[i][0])
        pre = f'''<b>–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º.</b>

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {"@"+out[i][1] if out[i][1] else ""} <i>({out[i][2].title() if out[i][2] else ""})</i>
{'–°—Ç–∏–∫–µ—Ä' if data.get('type')=='sticker' else '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}: <i>{'—Å–º. –≤—ã—à–µ' if data.get('type')=='sticker' else data.get('message')}</i>
–ü–æ–¥–ø–∏—Å—å: <i>{'–Ω–µ—Ç' if not data.get('title') else data.get('title_text')}</i>'''
    else:
        await state.update_data(slave_id=out[0])
        pre = f'''<b>–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º.</b>

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <i>{out[0]}</i>
{'–°—Ç–∏–∫–µ—Ä' if data.get('type') == 'sticker' else '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}: <i>{'—Å–º. –≤—ã—à–µ' if data.get('type') == 'sticker' else data.get('message')}</i>
–ü–æ–¥–ø–∏—Å—å: <i>{'–Ω–µ—Ç' if not data.get('title') else data.get('title_text')}</i>'''

    await message.answer(pre)
    btn_1 = types.InlineKeyboardButton('üöÄ', callback_data='send')
    btn_2 = types.InlineKeyboardButton('üöß', callback_data='abort')
    kb = types.InlineKeyboardMarkup().add(btn_1).add(btn_2)

    await message.answer('''–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üöÄ", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üöß", —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è''', reply_markup=kb)
    await Polling.Last.set()


@dp.callback_query_handler(lambda c: c.data == 'abort', state=Polling.Last)
async def step_8(callback_query: types.CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—åüòê

–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /valentine —Å–Ω–æ–≤–∞, —ç—Ç–æ —Ç–æ—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!''')
    log.info(f'{uid} stop the poll after date checking')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'send', state=Polling.Last)
async def step_8(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    uid = callback_query.from_user.id
    title_text = data.get('title_text')
    send_to = data.get('slave_id')

    await bot.answer_callback_query(callback_query.id)

    try:
        log.info(f'Send data from {uid} ot {send_to}')
        if data.get('type') == 'letter':
            await bot.send_message(send_to, f'''<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ "–ö–†–û–ú–û "–ú–∞–≥–∏—Å—Ç—Ä".</b>

–î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å–ª—ã—à–∞–ª –æ –Ω–∞—Å, –Ω–µ –ø—É–≥–∞–π—Å—è. –≠—Ç–æ –Ω–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞!

–°–µ–≥–æ–¥–Ω—è, –≤ –î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞, –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–ª–µ—à–º–æ–±. –õ—é–¥–∏ –ø–∏—à—É—Ç –Ω–∞–º –¥–æ–±—Ä—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —Ä–æ–¥–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö, –∞ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –∏—Ö –≤–æ—Ç —Ç–∞–∫–∏–º –Ω–µ–æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.

–¢—ã —Å—Ç–∞–ª –∞–¥—Ä–µ—Å–∞—Ç–æ–º —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

–í–æ—Ç —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª–∏:

<i>{data.get('message')}</i>
''')
            if data.get('title'):
                await bot.send_message(send_to, f'''–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –º—ã –¥–∞–∂–µ –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ, –∫—Ç–æ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª. –≠—Ç–æ <i>{title_text}</i>! –°–∫–æ—Ä–µ–µ –ø–æ–∂–µ–ª–∞–π –µ–º—É(–µ–π) —Ç–æ–∂–µ —á–µ–≥–æ-—Ç–æ –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ–≥–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ, —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ!''')
            else:
                await bot.send_message(send_to, f'''–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –∫—Ç–æ —ç—Ç–æ –º–æ–≥ –±—ã—Ç—å, –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ!''')

        if data.get('type') == 'sticker':
            await bot.send_message(send_to, f'''<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ "–ö–†–û–ú–û "–ú–∞–≥–∏—Å—Ç—Ä".</b>

–î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å–ª—ã—à–∞–ª –æ –Ω–∞—Å, –Ω–µ –ø—É–≥–∞–π—Å—è. –≠—Ç–æ –Ω–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞!

–°–µ–≥–æ–¥–Ω—è, –≤ –î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞, –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–ª–µ—à–º–æ–±. –õ—é–¥–∏ –ø–∏—à—É—Ç –Ω–∞–º –¥–æ–±—Ä—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —Ä–æ–¥–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö, –∞ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –∏—Ö –≤–æ—Ç —Ç–∞–∫–∏–º –Ω–µ–æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.

–¢—ã —Å—Ç–∞–ª –∞–¥—Ä–µ—Å–∞—Ç–æ–º —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

–í–æ—Ç —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª–∏:''')
            await bot.send_sticker(send_to, rf'{data.get("message")}')
            if data.get('title'):
                await bot.send_message(send_to, f'''–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –º—ã –¥–∞–∂–µ –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ, –∫—Ç–æ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª. –≠—Ç–æ <i>{title_text}</i>! –°–∫–æ—Ä–µ–µ –ø–æ–∂–µ–ª–∞–π –µ–º—É(–µ–π) —Ç–æ–∂–µ —á–µ–≥–æ-—Ç–æ –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ–≥–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ, —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ!''')
            else:
                await bot.send_message(send_to, f'''–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –∫—Ç–æ —ç—Ç–æ –º–æ–≥ –±—ã—Ç—å, –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ!''')
        await bot.send_message(uid, '–û—Ç–ª–∏—á–Ω–æ! –¢–∞–π–Ω—ã–π –í–∞–ª–µ–Ω—Ç–∏–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ :)')
    except:
        log.warn('Fail to send')
        await bot.send_message(uid, '''–û –Ω–µ—Ç, –∫–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å! –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –ø–æ—Å–ª–∞–Ω–∏—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø—Ä–µ—Ç–∏–ª –±–æ—Ç–∞–º –ø–∏—Å–∞—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –¢–∞–π–Ω—ã–π –í–∞–ª–µ–Ω—Ç–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É —Ç–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª.

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –¢—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É —Å–∞–º. –ï–º—É (–∏–ª–∏ –µ–π) —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ!''')

    await state.finish()
