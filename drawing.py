"""
–ë—É–¥—É –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω: —ç—Ç–æ —Å–∞–º—ã–π —É–∂–∞—Å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è —Å–æ—Ç–≤–æ—Ä–∏–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è. –Ø –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏
–∑–∞—á–µ–º –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –ù–æ –µ—Å–ª–∏ —É—á–µ—Å—Ç—å, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω —Å–ø—É—Å—Ç—è 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –¥—ç–¥–ª–∞–π–Ω–∞ –∏ –Ω—É–∂–µ–Ω –ª–∏—à—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é —Ä–∞–±–æ—Ç—É, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ —è —Å–º—ã—Å–ª–∞ –Ω–µ –≤–∏–∂—É
"""

import asyncio
import random

from aiogram import types
import aiogram

import santa
from db import Santa, Drawing, Polling, get_d
from dispatcher import bot

db = Santa()
db_drawing = Drawing()
db_polling = Polling()


# def get_pairs() -> list[tuple[int, int, bool]]:
def get_pairs():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –ø–∞—Ä–∞–º–∏ —Å–∞–Ω—Ç–∞ - –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –∏ —Ñ–ª–∞–≥–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ
    –ó–∞—á–µ–º –Ω–∞–º –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω —Ñ–ª–∞–≥ - –≤ –¥—É—à–µ –Ω–µ —á–∞—é, –Ω–æ –∫ —Ç—Ä–µ–º —É—Ç—Ä–∞ —è —É–∂–µ –ø–æ—Ç–µ—Ä—è–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—Å—É–¥–∫—É

    :return: [(—Å–∞–Ω—Ç–∞, –ø–æ–¥–æ–ø–µ—á–Ω—ã–π, on_meeting), ]
    """
    players_on_meeting, players_out_meeting = [], []
    pairs = []
    on_meeting_flag = False

    for player in db.get_players():
        # –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Ü–∏–∫–ª–æ–º, –Ω–æ –≤–æ-–ø–µ—Ä–≤—ã—Ö –∏ —Ç–∞–∫ —Å–æ–π–¥–µ—Ç, –∞ –≤–æ-–≤—Ç–æ—Ä—ã—Ö, –Ω—É–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é
        if player[1]:
            players_on_meeting.append(player[0])
        else:
            players_out_meeting.append(player[0])

    for players in (players_out_meeting, players_on_meeting):
        random.shuffle(players)
        pairs.append((players[-1], players[0], on_meeting_flag))

        for i in range(len(players) - 1):
            pairs.append((players[i], players[i + 1], on_meeting_flag))
        on_meeting_flag = True

    return pairs


# def add_pairs(pairs: list[tuple[int, int, bool]]) -> None:
def add_pairs(pairs) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–¥ drawing –ø–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    –ó–ê–ß–ï–ú –Ø –°–û–ó–î–ê–õ –ï–©–ï –û–î–ù–£ –ë–î?!?!

    :param pairs: [(master, slave, on_meeting),]
    :return: None
    """
    counter = 0

    for pair in pairs:
        db_drawing.add_pair(pair)
        counter += 1
    print(f'INFO: {counter} pairs were added to the database')


def get_mes_text(slave_id: int, on_meeting: bool) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–ª—ç–π–≤–∞

    :param slave_id: –∞–π–¥–∏—à–Ω–∏–∫ —Å–ª—ç–π–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ—Ä–≥–∞–µ–º –∏–Ω—Ñ—É
    :param on_meeting: –±—É–¥–µ—Ç –ª–∏ —Å–ª—ç–π–≤ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ
    :return: —Ç–µ–∫—Å—Ç
    """
    data = db.get_info(slave_id)

    txt_out = f'''<b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b> –ú—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –∂–µ—Ä–µ–±—å—ë–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ "–ú–∞–≥–∏—Å—Ç—Ä–∞". –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, –∫—Ç–æ –∏ –∫–æ–º—É –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –°–ø–µ—à–∏–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏ —Ç–µ–±–µ!

–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –¥–µ–ª–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫.

<b>–§–ò–û:</b> <i>{data[0]}</i>
<b>–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:</b> <i>{data[1]}</i>
<b>–ü—Ä–∏–µ–¥–µ—Ç –ª–∏ –Ω–∞ –æ–±—â–µ–ª–∞–≥–µ—Ä–Ω—É—é –≤—Å—Ç—Ä–µ—á—É:</b> –Ω–µ—Ç. –°–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –ø–æ—á—Ç–µ.

<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É:</b> <i>"{data[2]}"</i>

<i>–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª!" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>'''
    txt_on = f'''<b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b> –ú—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –∂–µ—Ä–µ–±—å—ë–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ "–ú–∞–≥–∏—Å—Ç—Ä–∞". –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, –∫—Ç–æ –∏ –∫–æ–º—É –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –°–ø–µ—à–∏–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏ —Ç–µ–±–µ!

–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –¥–µ–ª–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫.

<b>–§–ò–û:</b> <i>{data[0]}</i>
<b>–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:</b> <i>{data[1]}</i>
<b>–ü—Ä–∏–µ–¥–µ—Ç –ª–∏ –Ω–∞ –æ–±—â–µ–ª–∞–≥–µ—Ä–Ω—É—é –≤—Å—Ç—Ä–µ—á—É:</b> –î–∞!

<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É:</b> <i>"{data[2]}"</i>
–°–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –º–æ–∂–µ—à—å –∫–∞–∫ –æ—Ç–¥–∞—Ç—å –ª–∏—á–Ω–æ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ, —Ç–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ –ø–æ—á—Ç–µ.

<i>–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª!" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>'''

    return txt_on if on_meeting else txt_out


# async def sent_alerts(pairs: list[tuple[int, int, bool]]) -> None:
async def sent_alerts(pairs) -> None:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ–π –ø—Ä–æ –∏—Ö —Å–ª—ç–π–≤–∞

    :param pairs: [(—Å–∞–Ω—Ç–∞, –ø–æ–¥–æ–ø–µ—á–Ω—ã–π, on_meeting), ]
    :return: None
    """
    for pair in pairs:
        await bot.send_message(chat_id=pair[0], text=get_mes_text(pair[1], pair[2]), reply_markup=santa.sent_btn)
        await bot.close()  # –∂—É—Ç–∫–∏–π –∫–æ—Å—Ç—ã–ª—å, –Ω–æ –±–µ–∑ –Ω–µ–≥–æ –≤—Å–µ —Å—ã–ø–µ—Ç—Å—è. –ê —Ç–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—Ä–Ω–∏–Ω–≥ –ª–µ—Ç–∏—Ç
        await asyncio.sleep(30)


def get_f_text(foo):
    txt_anon = '''–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏, —Å–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É –µ–≥–æ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É. –ù–∞–≤–µ—Ä–Ω—è–∫–∞ —Ç—ã –∂–¥–∞–ª —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ üò±

–ù–æ –≤–æ—Ç –Ω–µ–∑–∞–¥–∞—á–∞! –¢–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –∑–∞—Ö–æ—Ç–µ–ª –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º. –ù–∞–≤–µ—Ä–Ω–æ–µ, –æ–Ω —Å–ª–µ–¥—É–µ—Ç –ø–æ–≥–æ–≤–æ—Ä–∫–µ "–°—á–∞—Å—Ç—å–µ –ª—é–±–∏—Ç —Ç–∏—à–∏–Ω—É"...

P. S. –ï—Å–ª–∏ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'''
    txt_norm = f'''–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏, —Å–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É –µ–≥–æ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É. –ù–∞–≤–µ—Ä–Ω—è–∫–∞ —Ç—ã –∂–¥–∞–ª —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ üò±

‚ú® –ò—Ç–∞–∫, —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ ‚Äì {str(foo)} ‚ú®

–ú–æ–∂–µ—à—å —Å–µ–π—á–∞—Å –∂–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –∏ –ø–æ–∂–µ–ª–∞—Ç—å –µ–º—É —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞!)

P. S. –ï—Å–ª–∏ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'''
    return txt_norm if foo else txt_anon


async def sent_questions() -> None:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞

    :return: None
    """
    # print(-1)

    inline_btn_1 = types.InlineKeyboardButton('–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫!', callback_data='not_rcd')
    start_pol_kb = types.InlineKeyboardMarkup().add(inline_btn_1)

    # print(0)

    data = get_d()
    # data =
    print(data)
    # print(1)

    for user in data:
        uid, master_name = user
        if uid in {941543842, 1652732836, 1636551595, 744431052, 1167059277, 920248300, 175044465, 1503877841, 713815827, 735035167, 1353175923, 830920118, 824548117, 499606837, 1298918427, 1038986109, 992489503}:
            continue
        print(f'trying to send to {uid}|{master_name}')
        try:
            await bot.send_message(chat_id=uid, text=get_f_text(master_name), reply_markup=start_pol_kb)
            print(f'sent to {uid}|{master_name}')
            # print(3)
            await bot.close()  # –∂—É—Ç–∫–∏–π –∫–æ—Å—Ç—ã–ª—å, –Ω–æ –±–µ–∑ –Ω–µ–≥–æ –≤—Å–µ —Å—ã–ø–µ—Ç—Å—è. –ê —Ç–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—Ä–Ω–∏–Ω–≥ –ª–µ—Ç–∏—Ç
            # print(4)
            await asyncio.sleep(15)
        except:
            print(f'FK-BLOCK: {uid}')


if __name__ == "__main__":
    # print(10)
    loop_ = asyncio.get_event_loop()
    # print(11)
    loop_.run_until_complete(sent_questions())
    # print(12)
    loop_.close()
