from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from db import Santa, Main, Drawing, Polling
from dispatcher import dp, bot
from messages import Messages


def init():
    # –∫–æ—Å—Ç—ã–ª—å, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç –≤ handlers.py –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º
    pass


messages = Messages()
mes_santa = Messages.Santa()
db = Santa()
db_main = Main()
db_drawing = Drawing()
db_poll = Polling()


class Poll(StatesGroup):
    Wishes = State()
    OnMeeting = State()
    Address = State()
    Name = State()


@dp.message_handler(commands=['santa_'], state=None)
async def start_polling(message: types.Message):
    await message.answer(mes_santa.on_start, disable_web_page_preview=True)
    await message.answer(mes_santa.ask_wishes)
    db_main.update_counter(message.from_user.id, 'santa')

    await Poll.Wishes.set()


@dp.message_handler(state=Poll.Wishes)
async def answer_q1(message: types.Message, state: FSMContext):
    mes_kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_1 = types.KeyboardButton('–î–∞!')
    btn_2 = types.KeyboardButton('–ù–µ—Ç')
    mes_kb.row(btn_1, btn_2)

    answer = message.text
    await state.update_data(wishes=answer)

    await message.answer(mes_santa.ask_meeting, reply_markup=mes_kb)
    await Poll.OnMeeting.set()


@dp.message_handler(state=Poll.OnMeeting)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in ['–î–∞!', '–ù–µ—Ç']:
        await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞')
        return
    answer = {'–î–∞!': True, '–ù–µ—Ç': False}[answer]
    await state.update_data(on_meeting=answer)

    await message.answer(mes_santa.ask_address, reply_markup=types.ReplyKeyboardRemove())
    await Poll.Address.set()


@dp.message_handler(state=Poll.Address)
async def answer_q3(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(address=answer)

    await message.answer(mes_santa.ask_name)
    await Poll.Name.set()


@dp.message_handler(state=Poll.Name)
async def answer_q3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    form = {'wishes': data.get("wishes"), 'on_meeting': data.get("on_meeting"), 'address': data.get("address"),
            'name': message.text}

    db.add_user(int(message.from_user.id), form)

    await message.answer(mes_santa.on_end)
    await state.finish()


@dp.message_handler(commands=['end_'])
async def team_mes(message: types.Message):
    db.del_user(int(message.from_user.id))
    db_main.update_counter(message.from_user.id, 'end')
    await message.answer(mes_santa.end)


inline_btn_1 = types.InlineKeyboardButton('–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª!', callback_data='sent_btn')
inline_btn_2 = types.InlineKeyboardButton('–Ø –ø–æ–ª—É—á–∏–ª!', callback_data='received_btn')
sent_btn = types.InlineKeyboardMarkup().add(inline_btn_1)
received_btn = types.InlineKeyboardMarkup().add(inline_btn_2)


@dp.callback_query_handler(lambda c: c.data == 'sent_btn')
async def process_callback_button1(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    db_drawing.change_sent_st(uid)
    await bot.send_message(uid, 'üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!')
    await bot.send_message(db_drawing.get_slave(uid), '''üì¨<b> –í–∞–º –ø–æ—Å—ã–ª–∫–∞!</b>

–ò–º–µ–Ω–Ω–æ —ç—Ç–æ —Ç—ã —Å–∫–æ—Ä–æ —É—Å–ª—ã—à–∏—à—å –æ—Ç –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞, –≤–µ–¥—å —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫!

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–ª—É—á–∏–ª!", –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ ''', reply_markup=received_btn)


@dp.callback_query_handler(lambda c: c.data == 'received_btn')
async def process_callback_button1(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    db_drawing.change_received_st(uid)
    await bot.send_message(uid, 'üîî –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!')
    await bot.send_message(db_drawing.get_master(uid), 'üéÅ –¢–≤–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫!')


class Poll2(StatesGroup):
    Name = State()
    Sent = State()
    Received = State()


@dp.callback_query_handler(lambda c: c.data == 'start_pol', state=None)
async def start_polling(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(uid, '''–ù–∞–ø–∏—à–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (—Ç–æ–≥–æ, –∫–æ–º—É —Ç—ã –¥–µ–ª–∞–ª –ø–æ–¥–∞—Ä–æ–∫).''')
    await Poll2.Name.set()


@dp.message_handler(state=Poll2.Name)
async def answer_q1(message: types.Message, state: FSMContext):
    # —Å—ç–π–≤–∏–º –∏–º—è —Å–ª—ç–π–≤–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–ø—Ä–∞–≤–∫—É
    mes_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton('–æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ –ø–æ—á—Ç–µ')
    btn_2 = types.KeyboardButton('–æ—Ç–¥–∞–ª –ª–∏—á–Ω–æ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ')
    btn_3 = types.KeyboardButton('–µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª')
    mes_kb.add(btn_1).add(btn_2).add(btn_3)

    answer = message.text
    uid = message.from_user.id
    await state.update_data(name=answer)
    await state.update_data(uid=uid)

    await message.answer(text='''–°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —Ç—ã –ø–æ–¥–∞—Ä–æ–∫ –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º?''', reply_markup=mes_kb)
    await Poll2.Sent.set()


@dp.message_handler(state=Poll2.Sent)
async def answer_q2(message: types.Message, state: FSMContext):
    mes_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton('–¥–∞, –ø–æ–ª—É—á–∏–ª –ø–æ –ø–æ—á—Ç–µ')
    btn_2 = types.KeyboardButton('–¥–∞, –ø–æ–ª—É—á–∏–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ')
    btn_3 = types.KeyboardButton('–Ω–µ—Ç, –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª')
    mes_kb.add(btn_1).add(btn_2).add(btn_3)

    answer = message.text
    if answer not in ['–æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ –ø–æ—á—Ç–µ', '–æ—Ç–¥–∞–ª –ª–∏—á–Ω–æ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ', '–µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª']:
        await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞')
        return
    answer = {'–æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ –ø–æ—á—Ç–µ': 1, '–æ—Ç–¥–∞–ª –ª–∏—á–Ω–æ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ': 2, '–µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª': 0}[answer]
    await state.update_data(sent_state=answer)

    await message.answer(text='''–ê –ø–æ–ª—É—á–∏–ª –ª–∏ —Å–∞–º —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫?''', reply_markup=mes_kb)
    await Poll2.Received.set()


@dp.message_handler(state=Poll2.Received)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in ['–¥–∞, –ø–æ–ª—É—á–∏–ª –ø–æ –ø–æ—á—Ç–µ', '–¥–∞, –ø–æ–ª—É—á–∏–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ', '–Ω–µ—Ç, –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª']:
        await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞')
        return
    answer = {'–¥–∞, –ø–æ–ª—É—á–∏–ª –ø–æ –ø–æ—á—Ç–µ': 1, '–¥–∞, –ø–æ–ª—É—á–∏–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ': 2, '–Ω–µ—Ç, –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª': 0}[answer]

    data = await state.get_data()
    db_poll.add_slave_name(int(data.get('uid')), data.get('name'))
    db_poll.update_data(int(data.get('uid')), data.get('sent_state'), answer)
    print(f'got from {message.from_user.id}')
    await message.answer(text='''–û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞–º –æ—á–µ–Ω—å –ø–æ–º–æ–≥. –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ :)''',
                         reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
